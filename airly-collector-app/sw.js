!function(Q){var I={};function g(C){if(I[C])return I[C].exports;var F=I[C]={i:C,l:!1,exports:{}};return Q[C].call(F.exports,F,F.exports,g),F.l=!0,F.exports}g.m=Q,g.c=I,g.d=function(Q,I,C){g.o(Q,I)||Object.defineProperty(Q,I,{enumerable:!0,get:C})},g.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},g.t=function(Q,I){if(1&I&&(Q=g(Q)),8&I)return Q;if(4&I&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var C=Object.create(null);if(g.r(C),Object.defineProperty(C,"default",{enumerable:!0,value:Q}),2&I&&"string"!=typeof Q)for(var F in Q)g.d(C,F,function(I){return Q[I]}.bind(null,F));return C},g.n=function(Q){var I=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return g.d(I,"a",I),I},g.o=function(Q,I){return Object.prototype.hasOwnProperty.call(Q,I)},g.p="airly-collector-app",g(g.s=33)}({0:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var _airly_AirlyPull__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);\n/* harmony import */ var _IndexedDB__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\nconst airlyStore = { installationInfos: {} };\r\nclass Store {\r\n}\r\nStore.Airly = {\r\n    store: airlyStore,\r\n    installationById(id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return yield this.installation({ id });\r\n        });\r\n    },\r\n    installation(data) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (typeof data.id === 'number' || typeof data.id === 'string') {\r\n                const id = parseInt(data.id.toString());\r\n                const info = yield Object(_IndexedDB__WEBPACK_IMPORTED_MODULE_1__[/* db */ \"a\"])('InstallationInfo').get(id);\r\n                if (typeof info !== 'undefined') {\r\n                    console.info('fast');\r\n                    return info;\r\n                }\r\n            }\r\n            console.info('slow');\r\n            const installationInfo = yield _airly_AirlyPull__WEBPACK_IMPORTED_MODULE_0__[/* AirlyPull */ \"a\"].installation(data);\r\n            this.store.installationInfos[installationInfo.id] = installationInfo;\r\n            yield Object(_IndexedDB__WEBPACK_IMPORTED_MODULE_1__[/* db */ \"a\"])('InstallationInfo').put(installationInfo);\r\n            return installationInfo;\r\n        });\r\n    },\r\n    measurements(data) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const id = (yield this.installation(data)).id;\r\n            const measurements = yield Object(_IndexedDB__WEBPACK_IMPORTED_MODULE_1__[/* db */ \"a\"])('History').measurement.get(id);\r\n            return measurements;\r\n        });\r\n    },\r\n    historyUpdateDateTime(data) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const id = (yield this.installation(data)).id;\r\n            const mostRecentUpdate = yield Object(_IndexedDB__WEBPACK_IMPORTED_MODULE_1__[/* db */ \"a\"])('History').updates.getMostRecent(id);\r\n            return mostRecentUpdate;\r\n        });\r\n    }\r\n};\r\nStore.Settings = {\r\n    setting(name, value) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (typeof value === 'undefined') {\r\n                const setting = yield Object(_IndexedDB__WEBPACK_IMPORTED_MODULE_1__[/* db */ \"a\"])('Settings').global.get(name);\r\n                return setting && setting.value;\r\n            }\r\n            else {\r\n                return yield Object(_IndexedDB__WEBPACK_IMPORTED_MODULE_1__[/* db */ \"a\"])('Settings').global.put({ name, value });\r\n            }\r\n        });\r\n    }\r\n};\r\n/* harmony default export */ __webpack_exports__[\"a\"] = (Store);\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvU3RvcmUudHM/MDg0ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQWlIO0FBQ2hGO0FBS2pDLE1BQU0sVUFBVSxHQUFlLEVBQUUsaUJBQWlCLEVBQUUsRUFBRSxFQUFFO0FBQ3hELE1BQU0sS0FBSzs7QUFDQSxXQUFLLEdBQUc7SUFDWCxLQUFLLEVBQUUsVUFBVTtJQUNYLGdCQUFnQixDQUFDLEVBQW1COztZQUN0QyxPQUFPLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDM0MsQ0FBQztLQUFBO0lBQ0ssWUFBWSxDQUFDLElBQTBCOztZQUN6QyxJQUFJLE9BQU8sSUFBSSxDQUFDLEVBQUUsS0FBSyxRQUFRLElBQUksT0FBTyxJQUFJLENBQUMsRUFBRSxLQUFLLFFBQVEsRUFBRTtnQkFDNUQsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztnQkFDeEMsTUFBTSxJQUFJLEdBQUcsTUFBTSw2REFBRSxDQUFDLGtCQUFrQixDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNsRCxJQUFJLE9BQU8sSUFBSSxLQUFLLFdBQVcsRUFBRTtvQkFDN0IsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7b0JBQ3BCLE9BQU8sSUFBSSxDQUFDO2lCQUNmO2FBQ0o7WUFDRCxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUNwQixNQUFNLGdCQUFnQixHQUFHLE1BQU0sa0VBQVMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDNUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQztZQUNyRSxNQUFNLDZEQUFFLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUNuRCxPQUFPLGdCQUFnQixDQUFDO1FBQzVCLENBQUM7S0FBQTtJQUNLLFlBQVksQ0FBQyxJQUEwQjs7WUFDekMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDOUMsTUFBTSxZQUFZLEdBQUcsTUFBTSw2REFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDN0QsT0FBTyxZQUFZLENBQUM7UUFDeEIsQ0FBQztLQUFBO0lBQ0sscUJBQXFCLENBQUMsSUFBMEI7O1lBQ2xELE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQzlDLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSw2REFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdkUsT0FBTyxnQkFBZ0IsQ0FBQztRQUM1QixDQUFDO0tBQUE7Q0FDSjtBQUNNLGNBQVEsR0FBRztJQUNSLE9BQU8sQ0FBQyxJQUFZLEVBQUUsS0FBVzs7WUFDbkMsSUFBSSxPQUFPLEtBQUssS0FBSyxXQUFXLEVBQUU7Z0JBQzlCLE1BQU0sT0FBTyxHQUFHLE1BQU0sNkRBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN0RCxPQUFPLE9BQU8sSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDO2FBQ25DO2lCQUFNO2dCQUNILE9BQU8sTUFBTSw2REFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQzthQUMzRDtRQUNMLENBQUM7S0FBQTtDQUNKO0FBR1UsOERBQUssRUFBQyIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWlybHlQdWxsLCBJbnN0YWxsYXRpb25Bcmd1bWVudCwgQWlybHlJbnN0YWxsYXRpb25JbmZvLCBBaXJseU1lYXN1cmVtZW50SW5mbyB9IGZyb20gJy4vYWlybHkvQWlybHlQdWxsJztcbmltcG9ydCB7IGRiIH0gZnJvbSBcIi4vSW5kZXhlZERCXCI7XG5pbXBvcnQgeyB1cGRhdGVNZWFzdXJlbWVudHMgfSBmcm9tICcuL2Fpcmx5L0Fpcmx5TWVhc3VyZW1lbnRzR2F0aGVyaW5nJztcbmludGVyZmFjZSBBaXJseVN0b3JlIHtcbiAgICBpbnN0YWxsYXRpb25JbmZvczogUmVjb3JkPG51bWJlciwgQWlybHlJbnN0YWxsYXRpb25JbmZvPlxufVxuY29uc3QgYWlybHlTdG9yZTogQWlybHlTdG9yZSA9IHsgaW5zdGFsbGF0aW9uSW5mb3M6IHt9IH1cbmNsYXNzIFN0b3JlIHtcbiAgICBzdGF0aWMgQWlybHkgPSB7XG4gICAgICAgIHN0b3JlOiBhaXJseVN0b3JlLFxuICAgICAgICBhc3luYyBpbnN0YWxsYXRpb25CeUlkKGlkOiBudW1iZXIgfCBzdHJpbmcpOiBQcm9taXNlPEFpcmx5SW5zdGFsbGF0aW9uSW5mbz4ge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuaW5zdGFsbGF0aW9uKHsgaWQgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIGluc3RhbGxhdGlvbihkYXRhOiBJbnN0YWxsYXRpb25Bcmd1bWVudCk6IFByb21pc2U8QWlybHlJbnN0YWxsYXRpb25JbmZvPiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRhdGEuaWQgPT09ICdudW1iZXInIHx8IHR5cGVvZiBkYXRhLmlkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gcGFyc2VJbnQoZGF0YS5pZC50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmZvID0gYXdhaXQgZGIoJ0luc3RhbGxhdGlvbkluZm8nKS5nZXQoaWQpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaW5mbyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKCdmYXN0JylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluZm87XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdzbG93JylcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbGxhdGlvbkluZm8gPSBhd2FpdCBBaXJseVB1bGwuaW5zdGFsbGF0aW9uKGRhdGEpO1xuICAgICAgICAgICAgdGhpcy5zdG9yZS5pbnN0YWxsYXRpb25JbmZvc1tpbnN0YWxsYXRpb25JbmZvLmlkXSA9IGluc3RhbGxhdGlvbkluZm87XG4gICAgICAgICAgICBhd2FpdCBkYignSW5zdGFsbGF0aW9uSW5mbycpLnB1dChpbnN0YWxsYXRpb25JbmZvKTtcbiAgICAgICAgICAgIHJldHVybiBpbnN0YWxsYXRpb25JbmZvO1xuICAgICAgICB9LFxuICAgICAgICBhc3luYyBtZWFzdXJlbWVudHMoZGF0YTogSW5zdGFsbGF0aW9uQXJndW1lbnQpOiBQcm9taXNlPHsgaW5zdGFsbGF0aW9uSWQ6IG51bWJlciwgbWVhc3VyZW1lbnQ6IEFpcmx5TWVhc3VyZW1lbnRJbmZvIH1bXT4ge1xuICAgICAgICAgICAgY29uc3QgaWQgPSAoYXdhaXQgdGhpcy5pbnN0YWxsYXRpb24oZGF0YSkpLmlkO1xuICAgICAgICAgICAgY29uc3QgbWVhc3VyZW1lbnRzID0gYXdhaXQgZGIoJ0hpc3RvcnknKS5tZWFzdXJlbWVudC5nZXQoaWQpO1xuICAgICAgICAgICAgcmV0dXJuIG1lYXN1cmVtZW50cztcbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgaGlzdG9yeVVwZGF0ZURhdGVUaW1lKGRhdGE6IEluc3RhbGxhdGlvbkFyZ3VtZW50KTogUHJvbWlzZTx7IGluc3RhbGxhdGlvbklkOiBudW1iZXIsIHVwZGF0ZURhdGVUaW1lOiBzdHJpbmcgfT4ge1xuICAgICAgICAgICAgY29uc3QgaWQgPSAoYXdhaXQgdGhpcy5pbnN0YWxsYXRpb24oZGF0YSkpLmlkO1xuICAgICAgICAgICAgY29uc3QgbW9zdFJlY2VudFVwZGF0ZSA9IGF3YWl0IGRiKCdIaXN0b3J5JykudXBkYXRlcy5nZXRNb3N0UmVjZW50KGlkKTtcbiAgICAgICAgICAgIHJldHVybiBtb3N0UmVjZW50VXBkYXRlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBTZXR0aW5ncyA9IHtcbiAgICAgICAgYXN5bmMgc2V0dGluZyhuYW1lOiBzdHJpbmcsIHZhbHVlPzogYW55KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNldHRpbmcgPSBhd2FpdCBkYignU2V0dGluZ3MnKS5nbG9iYWwuZ2V0KG5hbWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXR0aW5nICYmIHNldHRpbmcudmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBkYignU2V0dGluZ3MnKS5nbG9iYWwucHV0KHsgbmFtZSwgdmFsdWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN0b3JlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n")},1:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return db; });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nconst dbInfo = {\r\n    InstallationInfo: {\r\n        version: 1,\r\n        onupgradeneeded(db) {\r\n            const objectStore = db.createObjectStore("installations", { keyPath: "id" });\r\n        },\r\n        methods(getDb) {\r\n            return {\r\n                get(id) {\r\n                    return __awaiter(this, void 0, void 0, function* () {\r\n                        const db = yield getDb();\r\n                        const transaction = db.transaction(["installations"], "readwrite");\r\n                        const objectStore = transaction.objectStore("installations");\r\n                        return new Promise((resolve, reject) => {\r\n                            const req = objectStore.get(id);\r\n                            req.onsuccess = (event) => {\r\n                                resolve(req.result);\r\n                            };\r\n                            req.onerror = (event) => {\r\n                                console.error(event, id);\r\n                                reject(req.result);\r\n                            };\r\n                        });\r\n                    });\r\n                },\r\n                put(data) {\r\n                    return __awaiter(this, void 0, void 0, function* () {\r\n                        const db = yield getDb();\r\n                        const transaction = db.transaction(["installations"], "readwrite");\r\n                        const objectStore = transaction.objectStore("installations");\r\n                        const req = objectStore.add(data);\r\n                        req.oncomplete = (event) => {\r\n                            Promise.resolve(true);\r\n                        };\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    },\r\n    History: {\r\n        version: 2,\r\n        onupgradeneeded(db) {\r\n            if (!db.objectStoreNames.contains(\'measurementHistory\')) {\r\n                const objectStore = db.createObjectStore("measurementHistory", {\r\n                    keyPath: [\r\n                        "installationId",\r\n                        "measurement.fromDateTime",\r\n                        "measurement.tillDateTime"\r\n                    ]\r\n                });\r\n                objectStore.createIndex("installationId", "installationId", { unique: false });\r\n                objectStore.createIndex("fromDateTime", "measurement.fromDateTime", { unique: false });\r\n                objectStore.createIndex("tillDateTime", "measurement.tillDateTime", { unique: false });\r\n            }\r\n            if (!db.objectStoreNames.contains(\'forecastHistory\')) {\r\n                const objectStore = db.createObjectStore("forecastHistory", {\r\n                    keyPath: [\r\n                        "installationId",\r\n                        "predictionDateTime",\r\n                        "measurement.fromDateTime",\r\n                        "measurement.tillDateTime"\r\n                    ]\r\n                });\r\n                objectStore.createIndex("installationId", "installationId");\r\n                objectStore.createIndex("fromDateTime", "measurement.fromDateTime", { unique: false });\r\n                objectStore.createIndex("tillDateTime", "measurement.tillDateTime", { unique: false });\r\n                objectStore.createIndex("predictionDateTime", "predictionDateTime", { unique: false });\r\n            }\r\n            if (!db.objectStoreNames.contains(\'updates\')) {\r\n                const objectStore = db.createObjectStore("updates", {\r\n                    keyPath: [\r\n                        "installationId",\r\n                        "updateDateTime"\r\n                    ]\r\n                });\r\n                objectStore.createIndex("installationId", "installationId", { unique: false });\r\n                objectStore.createIndex("updateDateTime", "updateDateTime", { unique: false });\r\n            }\r\n        },\r\n        methods(getDb) {\r\n            return {\r\n                measurement: {\r\n                    get(installationId) {\r\n                        return __awaiter(this, void 0, void 0, function* () {\r\n                            const db = yield getDb();\r\n                            const transaction = db.transaction(["measurementHistory"], "readonly");\r\n                            const objectStore = transaction.objectStore("measurementHistory");\r\n                            return new Promise((resolve, reject) => {\r\n                                const fromIndex = objectStore.index(\'installationId\');\r\n                                const keyRange = IDBKeyRange.only(installationId);\r\n                                const req = fromIndex.getAll(keyRange);\r\n                                req.onsuccess = (event) => {\r\n                                    resolve(req.result);\r\n                                };\r\n                                req.onerror = (event) => {\r\n                                    console.error(event, installationId);\r\n                                    reject(event);\r\n                                };\r\n                            });\r\n                        });\r\n                    },\r\n                    putAll(data) {\r\n                        return __awaiter(this, void 0, void 0, function* () {\r\n                            console.debug(data);\r\n                            const db = yield getDb();\r\n                            const transaction = db.transaction(["measurementHistory"], "readwrite");\r\n                            const objectStore = transaction.objectStore("measurementHistory");\r\n                            const promises = data.map(record => {\r\n                                return new Promise((resolve, reject) => {\r\n                                    const req = objectStore.put(record);\r\n                                    req.onsuccess = (event) => {\r\n                                        resolve(true);\r\n                                    };\r\n                                    req.onerror = (event) => {\r\n                                        console.error(\'measurement.putAll error\', event, record);\r\n                                        reject();\r\n                                    };\r\n                                });\r\n                            });\r\n                            return yield Promise.all(promises);\r\n                        });\r\n                    }\r\n                },\r\n                forecast: {\r\n                    get(fromPredictionDateTime, tillPredictionDateTime) {\r\n                        return __awaiter(this, void 0, void 0, function* () {\r\n                            const db = yield getDb();\r\n                            const transaction = db.transaction(["forecastHistory"], "readonly");\r\n                            const objectStore = transaction.objectStore("forecastHistory");\r\n                            return new Promise((resolve, reject) => {\r\n                                const fromIndex = objectStore.index(\'predictionDateTime\');\r\n                                const keyRange = IDBKeyRange.bound(fromPredictionDateTime, tillPredictionDateTime);\r\n                                const req = fromIndex.getAll(keyRange);\r\n                                req.onsuccess = (event) => {\r\n                                    resolve();\r\n                                };\r\n                                req.onerror = (event) => {\r\n                                    console.error(event, fromPredictionDateTime, tillPredictionDateTime);\r\n                                    reject();\r\n                                };\r\n                            });\r\n                        });\r\n                    },\r\n                    putAll(data) {\r\n                        return __awaiter(this, void 0, void 0, function* () {\r\n                            const db = yield getDb();\r\n                            const transaction = db.transaction(["forecastHistory"], "readwrite");\r\n                            const objectStore = transaction.objectStore("forecastHistory");\r\n                            const promises = data.map(record => {\r\n                                return new Promise((resolve, reject) => {\r\n                                    const req = objectStore.put(record);\r\n                                    req.onsuccess = (event) => {\r\n                                        resolve(true);\r\n                                    };\r\n                                    req.onerror = (event) => {\r\n                                        console.error(event, data);\r\n                                        reject({\r\n                                            event,\r\n                                            record\r\n                                        });\r\n                                    };\r\n                                });\r\n                            });\r\n                            return Promise.all(promises);\r\n                        });\r\n                    }\r\n                },\r\n                updates: {\r\n                    getMostRecent(installationId) {\r\n                        return __awaiter(this, void 0, void 0, function* () {\r\n                            const db = yield getDb();\r\n                            const transaction = db.transaction(["updates"], "readonly");\r\n                            const objectStore = transaction.objectStore("updates");\r\n                            return new Promise((resolve, reject) => {\r\n                                const fromIndex = objectStore.index(\'installationId\');\r\n                                const keyRange = IDBKeyRange.only(installationId);\r\n                                const req = fromIndex.getAll(keyRange);\r\n                                req.onsuccess = (event) => {\r\n                                    const theMostRecent = req.result.reduce((mostRecent, current) => {\r\n                                        if (mostRecent.updateDateTime < current.updateDateTime)\r\n                                            return current;\r\n                                        return mostRecent;\r\n                                    }, req.result[0] || {});\r\n                                    resolve(theMostRecent);\r\n                                };\r\n                                req.onerror = (event) => {\r\n                                    console.error(event, installationId);\r\n                                    reject(event);\r\n                                };\r\n                            });\r\n                        });\r\n                    },\r\n                    put(data) {\r\n                        return __awaiter(this, void 0, void 0, function* () {\r\n                            const db = yield getDb();\r\n                            const transaction = db.transaction(["updates"], "readwrite");\r\n                            const objectStore = transaction.objectStore("updates");\r\n                            return yield new Promise((resolve, reject) => {\r\n                                const req = objectStore.put(data);\r\n                                req.onsuccess = (event) => {\r\n                                    resolve(true);\r\n                                };\r\n                                req.onerror = (event) => {\r\n                                    console.error(\'updates.put error\', event, data);\r\n                                    reject();\r\n                                };\r\n                            });\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    },\r\n    Settings: {\r\n        version: 1,\r\n        onupgradeneeded(db) {\r\n            if (!db.objectStoreNames.contains(\'global\')) {\r\n                const objectStore = db.createObjectStore("global", { keyPath: "name" });\r\n                objectStore.createIndex("name", "name", { unique: true });\r\n                objectStore.createIndex("value", "value", { unique: false });\r\n            }\r\n        },\r\n        methods(getDb) {\r\n            return {\r\n                global: {\r\n                    get(name) {\r\n                        return __awaiter(this, void 0, void 0, function* () {\r\n                            const db = yield getDb();\r\n                            const transaction = db.transaction(["global"], "readonly");\r\n                            const objectStore = transaction.objectStore("global");\r\n                            return new Promise((resolve, reject) => {\r\n                                const fromIndex = objectStore.index(\'name\');\r\n                                const keyRange = IDBKeyRange.only(name);\r\n                                const req = fromIndex.get(keyRange);\r\n                                req.onsuccess = (event) => {\r\n                                    resolve(req.result);\r\n                                };\r\n                                req.onerror = (event) => {\r\n                                    console.error(event);\r\n                                    reject(event);\r\n                                };\r\n                            });\r\n                        });\r\n                    },\r\n                    put(setting) {\r\n                        return __awaiter(this, void 0, void 0, function* () {\r\n                            const db = yield getDb();\r\n                            const transaction = db.transaction(["global"], "readwrite");\r\n                            const objectStore = transaction.objectStore("global");\r\n                            return new Promise((resolve, reject) => {\r\n                                const req = objectStore.put(setting);\r\n                                req.onsuccess = (event) => {\r\n                                    resolve(true);\r\n                                };\r\n                                req.onerror = (event) => {\r\n                                    console.error(\'measurement.putAll error\', event, setting);\r\n                                    reject(event);\r\n                                };\r\n                            });\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n};\r\nfunction db(name) {\r\n    if (typeof dbInfo[name] === \'undefined\') {\r\n        throw `IndexedDB \'${name}\' is not supported.`;\r\n    }\r\n    const version = dbInfo[name].version;\r\n    function getDb() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const persistent = yield ensureDataPersistance();\r\n            console.debug(\'PERSISTENT\', persistent);\r\n            return yield new Promise((resolve, reject) => {\r\n                const request = indexedDB.open(name, version);\r\n                request.onerror = event => {\r\n                    reject(`IndexedDB error`);\r\n                };\r\n                request.onsuccess = (event) => {\r\n                    const db = event.target.result;\r\n                    resolve(db);\r\n                };\r\n                request.onupgradeneeded = (event) => {\r\n                    const db = event.target.result;\r\n                    dbInfo[name].onupgradeneeded(db);\r\n                    const transaction = event.target.transaction;\r\n                    transaction.oncomplete = (event) => {\r\n                        console.debug(\'upgraded\');\r\n                        resolve(db);\r\n                    };\r\n                    transaction.onerror = (event) => {\r\n                        reject(event);\r\n                    };\r\n                };\r\n            });\r\n        });\r\n    }\r\n    return dbInfo[name].methods(getDb);\r\n}\r\nfunction ensureDataPersistance() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        if (navigator.storage && navigator.storage.persist) {\r\n            const persistent = yield navigator.storage.persisted();\r\n            return persistent || (yield navigator.storage.persist());\r\n        }\r\n        return false;\r\n    });\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')},3:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return AirlyPull; });\n/* harmony import */ var _Store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\nconst urlCore = 'https://airapi.airly.eu/v2';\r\nfunction installationArgumentToQuery(endpoint, data) {\r\n    let url;\r\n    if (typeof data.id === 'number' || typeof data.id === 'string') {\r\n        url = `${data.id}`;\r\n    }\r\n    else if (typeof data.nearest === 'object') {\r\n        url = `nearest?lat=${data.nearest.latitude}&lng=${data.nearest.longitude}`;\r\n    }\r\n    return `${urlCore}/${endpoint[0]}${url}`;\r\n}\r\nfunction measurementArgumentToQuery(endpoint, data) {\r\n    let url;\r\n    if (typeof data.id === 'number' || typeof data.id === 'string') {\r\n        url = `installation?installationId=${data.id}`;\r\n    }\r\n    else if (typeof data.nearest === 'object') {\r\n        url = `nearest?lat=${data.nearest.latitude}&lng=${data.nearest.longitude}`;\r\n    }\r\n    else if (typeof data.forPoint === 'object') {\r\n        url = `point?lat=${data.forPoint.latitude}&lng=${data.forPoint.longitude}`;\r\n    }\r\n    return `${urlCore}/${endpoint[0]}${url}`;\r\n}\r\nfunction getApiKey() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const apiKey = yield _Store__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"].Settings.setting('apiKey');\r\n        if (apiKey === null) {\r\n            throw 'No api key available in localStorage.';\r\n        }\r\n        return apiKey;\r\n    });\r\n}\r\nfunction actByStatus(statusCode) {\r\n    switch (statusCode) {\r\n        case 200:\r\n            break;\r\n        case 429:\r\n            console.error('HTTP 429 - Too Many Requests');\r\n        default:\r\n            break;\r\n    }\r\n}\r\nclass AirlyPull {\r\n    static installation(data) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let requestInit = {};\r\n            requestInit.headers = {\r\n                Accept: 'application/json',\r\n                apiKey: yield getApiKey()\r\n            };\r\n            const url = installationArgumentToQuery `installations/${data}`;\r\n            console.log(url);\r\n            const response = yield fetch(url, requestInit);\r\n            console.debug(response);\r\n            actByStatus(response.status);\r\n            if (!response.ok) {\r\n                throw \"Response failed.\";\r\n            }\r\n            const json = yield response.json();\r\n            console.debug(json);\r\n            return json;\r\n        });\r\n    }\r\n    static measurements(data) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let requestInit = {};\r\n            requestInit.headers = {\r\n                Accept: 'application/json',\r\n                apiKey: yield getApiKey()\r\n            };\r\n            const url = measurementArgumentToQuery `measurements/${data}`;\r\n            const response = yield fetch(url, requestInit);\r\n            console.debug(response);\r\n            actByStatus(response.status);\r\n            if (!response.ok) {\r\n                throw \"Response failed.\";\r\n            }\r\n            const json = yield response.json();\r\n            console.debug(json);\r\n            return json;\r\n        });\r\n    }\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYWlybHkvQWlybHlQdWxsLnRzP2Q4MjkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUErQjtBQTZFL0IsTUFBTSxPQUFPLEdBQUcsNEJBQTRCLENBQUM7QUFDN0MsU0FBUywyQkFBMkIsQ0FBQyxRQUE4QixFQUFFLElBQTBCO0lBQzNGLElBQUksR0FBRyxDQUFDO0lBQ1IsSUFBSSxPQUFPLElBQUksQ0FBQyxFQUFFLEtBQUssUUFBUSxJQUFJLE9BQU8sSUFBSSxDQUFDLEVBQUUsS0FBSyxRQUFRLEVBQUU7UUFDNUQsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0tBQ3RCO1NBQU0sSUFBSSxPQUFPLElBQUksQ0FBQyxPQUFPLEtBQUssUUFBUSxFQUFFO1FBQ3pDLEdBQUcsR0FBRyxlQUFlLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxRQUFRLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUM7S0FDOUU7SUFDRCxPQUFPLEdBQUcsT0FBTyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUM3QyxDQUFDO0FBQ0QsU0FBUywwQkFBMEIsQ0FBQyxRQUE4QixFQUFFLElBQXlCO0lBQ3pGLElBQUksR0FBRyxDQUFDO0lBQ1IsSUFBSSxPQUFPLElBQUksQ0FBQyxFQUFFLEtBQUssUUFBUSxJQUFJLE9BQU8sSUFBSSxDQUFDLEVBQUUsS0FBSyxRQUFRLEVBQUU7UUFDNUQsR0FBRyxHQUFHLCtCQUErQixJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7S0FDbEQ7U0FBTSxJQUFJLE9BQU8sSUFBSSxDQUFDLE9BQU8sS0FBSyxRQUFRLEVBQUU7UUFDekMsR0FBRyxHQUFHLGVBQWUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLFFBQVEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztLQUM5RTtTQUFNLElBQUksT0FBTyxJQUFJLENBQUMsUUFBUSxLQUFLLFFBQVEsRUFBRTtRQUMxQyxHQUFHLEdBQUcsYUFBYSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsUUFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDO0tBQzlFO0lBQ0QsT0FBTyxHQUFHLE9BQU8sSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7QUFDN0MsQ0FBQztBQUNELFNBQWUsU0FBUzs7UUFDcEIsTUFBTSxNQUFNLEdBQUcsTUFBTSxzREFBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEQsSUFBSSxNQUFNLEtBQUssSUFBSSxFQUFFO1lBQ2pCLE1BQU0sdUNBQXVDLENBQUM7U0FDakQ7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0NBQUE7QUFDRCxTQUFTLFdBQVcsQ0FBQyxVQUFrQjtJQUNuQyxRQUFRLFVBQVUsRUFBRTtRQUNoQixLQUFLLEdBQUc7WUFDSixNQUFNO1FBQ1YsS0FBSyxHQUFHO1lBQ0osT0FBTyxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1FBQ2xEO1lBQ0ksTUFBTTtLQUNiO0FBQ0wsQ0FBQztBQUNNLE1BQU0sU0FBUztJQUNsQixNQUFNLENBQU8sWUFBWSxDQUFDLElBQTBCOztZQUNoRCxJQUFJLFdBQVcsR0FBZ0IsRUFBRSxDQUFDO1lBQ2xDLFdBQVcsQ0FBQyxPQUFPLEdBQUc7Z0JBQ2xCLE1BQU0sRUFBRSxrQkFBa0I7Z0JBQzFCLE1BQU0sRUFBRSxNQUFNLFNBQVMsRUFBRTthQUM1QixDQUFDO1lBQ0YsTUFBTSxHQUFHLEdBQUcsMkJBQTJCLGtCQUFpQixJQUFJLEVBQUUsQ0FBQztZQUMvRCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztZQUVoQixNQUFNLFFBQVEsR0FBRyxNQUFNLEtBQUssQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDL0MsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7WUFDdkIsV0FBVyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM3QixJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRTtnQkFDZCxNQUFNLGtCQUFrQixDQUFDO2FBQzVCO1lBQ0QsTUFBTSxJQUFJLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDbkMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7WUFDbkIsT0FBTyxJQUFJLENBQUM7UUFDaEIsQ0FBQztLQUFBO0lBQ0QsTUFBTSxDQUFPLFlBQVksQ0FBQyxJQUEwQjs7WUFDaEQsSUFBSSxXQUFXLEdBQWdCLEVBQUUsQ0FBQztZQUNsQyxXQUFXLENBQUMsT0FBTyxHQUFHO2dCQUNsQixNQUFNLEVBQUUsa0JBQWtCO2dCQUMxQixNQUFNLEVBQUUsTUFBTSxTQUFTLEVBQUU7YUFDNUIsQ0FBQztZQUNGLE1BQU0sR0FBRyxHQUFHLDBCQUEwQixpQkFBZ0IsSUFBSSxFQUFFLENBQUM7WUFFN0QsTUFBTSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQy9DLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO1lBQ3ZCLFdBQVcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDN0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2QsTUFBTSxrQkFBa0IsQ0FBQzthQUM1QjtZQUNELE1BQU0sSUFBSSxHQUFHLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ25DLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDcEIsT0FBTyxJQUFJLENBQUM7UUFDaEIsQ0FBQztLQUFBO0NBQ0oiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTdG9yZSBmcm9tICcuLy4uL1N0b3JlJztcbmV4cG9ydCBpbnRlcmZhY2UgQWlybHlJbnN0YWxsYXRpb25JbmZvIHtcbiAgICBcImlkXCI6IG51bWJlcixcbiAgICBcImxvY2F0aW9uXCI6IHtcbiAgICAgICAgXCJsYXRpdHVkZVwiOiBudW1iZXIsXG4gICAgICAgIFwibG9uZ2l0dWRlXCI6IG51bWJlclxuICAgIH0sXG4gICAgXCJhZGRyZXNzXCI6IHtcbiAgICAgICAgXCJjb3VudHJ5XCI6IHN0cmluZyxcbiAgICAgICAgXCJjaXR5XCI6IHN0cmluZyxcbiAgICAgICAgXCJzdHJlZXRcIjogc3RyaW5nLFxuICAgICAgICBcIm51bWJlclwiOiBzdHJpbmcsXG4gICAgICAgIFwiZGlzcGxheUFkZHJlc3MxXCI6IHN0cmluZyxcbiAgICAgICAgXCJkaXNwbGF5QWRkcmVzczJcIjogc3RyaW5nXG4gICAgfSxcbiAgICBcImVsZXZhdGlvblwiOiBudW1iZXIsXG4gICAgXCJhaXJseVwiOiBib29sZWFuLFxuICAgIFwic3BvbnNvclwiOiB7XG4gICAgICAgIFwibmFtZVwiOiBzdHJpbmcsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogc3RyaW5nLFxuICAgICAgICBcImxvZ29cIjogc3RyaW5nLFxuICAgICAgICBcImxpbmtcIjogc3RyaW5nXG4gICAgfVxufVxuZXhwb3J0IGludGVyZmFjZSBBaXJseU1lYXN1cmVtZW50SW5mbyB7XG4gICAgXCJmcm9tRGF0ZVRpbWVcIjogc3RyaW5nLFxuICAgIFwidGlsbERhdGVUaW1lXCI6IHN0cmluZyxcbiAgICBcInZhbHVlc1wiOiBbXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiUE0xXCIsIFwidmFsdWVcIjogbnVtYmVyIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiUE0yNVwiLCBcInZhbHVlXCI6IG51bWJlciB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIlBNMTBcIiwgXCJ2YWx1ZVwiOiBudW1iZXIgfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJQUkVTU1VSRVwiLCBcInZhbHVlXCI6IG51bWJlciB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIkhVTUlESVRZXCIsIFwidmFsdWVcIjogbnVtYmVyIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiVEVNUEVSQVRVUkVcIiwgXCJ2YWx1ZVwiOiBudW1iZXIgfVxuICAgIF0sXG4gICAgXCJpbmRleGVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IHN0cmluZyxcbiAgICAgICAgICAgIFwidmFsdWVcIjogMzUuNTMsXG4gICAgICAgICAgICBcImxldmVsXCI6IHN0cmluZyxcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogc3RyaW5nLFxuICAgICAgICAgICAgXCJhZHZpY2VcIjogc3RyaW5nLFxuICAgICAgICAgICAgXCJjb2xvclwiOiBzdHJpbmdcbiAgICAgICAgfVxuICAgIF0sXG4gICAgXCJzdGFuZGFyZHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogc3RyaW5nLFxuICAgICAgICAgICAgXCJwb2xsdXRhbnRcIjogc3RyaW5nLFxuICAgICAgICAgICAgXCJsaW1pdFwiOiBudW1iZXIsXG4gICAgICAgICAgICBcInBlcmNlbnRcIjogbnVtYmVyLFxuICAgICAgICB9XG4gICAgXVxufVxuZXhwb3J0IGludGVyZmFjZSBBaXJseU1lYXN1cmVtZW50c0luZm8ge1xuICAgIFwiY3VycmVudFwiOiBBaXJseU1lYXN1cmVtZW50SW5mbyxcbiAgICBcImhpc3RvcnlcIjogQWlybHlNZWFzdXJlbWVudEluZm9bXSxcbiAgICBcImZvcmVjYXN0XCI6IEFpcmx5TWVhc3VyZW1lbnRJbmZvW11cbn1cbmV4cG9ydCBpbnRlcmZhY2UgSW5zdGFsbGF0aW9uQXJndW1lbnQge1xuICAgIGlkPzogbnVtYmVyIHwgc3RyaW5nLFxuICAgIG5lYXJlc3Q/OiB7XG4gICAgICAgIGxhdGl0dWRlOiBudW1iZXIsXG4gICAgICAgIGxvbmdpdHVkZTogbnVtYmVyXG4gICAgfVxufVxuZXhwb3J0IGludGVyZmFjZSBNZWFzdXJlbWVudEFyZ3VtZW50IHtcbiAgICBpZD86IG51bWJlciB8IHN0cmluZyxcbiAgICBuZWFyZXN0Pzoge1xuICAgICAgICBsYXRpdHVkZTogbnVtYmVyLFxuICAgICAgICBsb25naXR1ZGU6IG51bWJlclxuICAgIH0sXG4gICAgZm9yUG9pbnQ/OiB7XG4gICAgICAgIGxhdGl0dWRlOiBudW1iZXIsXG4gICAgICAgIGxvbmdpdHVkZTogbnVtYmVyXG4gICAgfVxufVxuY29uc3QgdXJsQ29yZSA9ICdodHRwczovL2FpcmFwaS5haXJseS5ldS92Mic7XG5mdW5jdGlvbiBpbnN0YWxsYXRpb25Bcmd1bWVudFRvUXVlcnkoZW5kcG9pbnQ6IFRlbXBsYXRlU3RyaW5nc0FycmF5LCBkYXRhOiBJbnN0YWxsYXRpb25Bcmd1bWVudCkge1xuICAgIGxldCB1cmw7XG4gICAgaWYgKHR5cGVvZiBkYXRhLmlkID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgZGF0YS5pZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdXJsID0gYCR7ZGF0YS5pZH1gO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEubmVhcmVzdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdXJsID0gYG5lYXJlc3Q/bGF0PSR7ZGF0YS5uZWFyZXN0LmxhdGl0dWRlfSZsbmc9JHtkYXRhLm5lYXJlc3QubG9uZ2l0dWRlfWA7XG4gICAgfVxuICAgIHJldHVybiBgJHt1cmxDb3JlfS8ke2VuZHBvaW50WzBdfSR7dXJsfWA7XG59XG5mdW5jdGlvbiBtZWFzdXJlbWVudEFyZ3VtZW50VG9RdWVyeShlbmRwb2ludDogVGVtcGxhdGVTdHJpbmdzQXJyYXksIGRhdGE6IE1lYXN1cmVtZW50QXJndW1lbnQpIHtcbiAgICBsZXQgdXJsO1xuICAgIGlmICh0eXBlb2YgZGF0YS5pZCA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGRhdGEuaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHVybCA9IGBpbnN0YWxsYXRpb24/aW5zdGFsbGF0aW9uSWQ9JHtkYXRhLmlkfWA7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YS5uZWFyZXN0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICB1cmwgPSBgbmVhcmVzdD9sYXQ9JHtkYXRhLm5lYXJlc3QubGF0aXR1ZGV9JmxuZz0ke2RhdGEubmVhcmVzdC5sb25naXR1ZGV9YDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhLmZvclBvaW50ID09PSAnb2JqZWN0Jykge1xuICAgICAgICB1cmwgPSBgcG9pbnQ/bGF0PSR7ZGF0YS5mb3JQb2ludC5sYXRpdHVkZX0mbG5nPSR7ZGF0YS5mb3JQb2ludC5sb25naXR1ZGV9YDtcbiAgICB9XG4gICAgcmV0dXJuIGAke3VybENvcmV9LyR7ZW5kcG9pbnRbMF19JHt1cmx9YDtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldEFwaUtleSgpIHtcbiAgICBjb25zdCBhcGlLZXkgPSBhd2FpdCBTdG9yZS5TZXR0aW5ncy5zZXR0aW5nKCdhcGlLZXknKTtcbiAgICBpZiAoYXBpS2V5ID09PSBudWxsKSB7XG4gICAgICAgIHRocm93ICdObyBhcGkga2V5IGF2YWlsYWJsZSBpbiBsb2NhbFN0b3JhZ2UuJztcbiAgICB9XG4gICAgcmV0dXJuIGFwaUtleTtcbn1cbmZ1bmN0aW9uIGFjdEJ5U3RhdHVzKHN0YXR1c0NvZGU6IG51bWJlcikge1xuICAgIHN3aXRjaCAoc3RhdHVzQ29kZSkge1xuICAgICAgICBjYXNlIDIwMDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQyOTpcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0hUVFAgNDI5IC0gVG9vIE1hbnkgUmVxdWVzdHMnKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBBaXJseVB1bGwge1xuICAgIHN0YXRpYyBhc3luYyBpbnN0YWxsYXRpb24oZGF0YTogSW5zdGFsbGF0aW9uQXJndW1lbnQpOiBQcm9taXNlPEFpcmx5SW5zdGFsbGF0aW9uSW5mbz4ge1xuICAgICAgICBsZXQgcmVxdWVzdEluaXQ6IFJlcXVlc3RJbml0ID0ge307XG4gICAgICAgIHJlcXVlc3RJbml0LmhlYWRlcnMgPSB7XG4gICAgICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgIGFwaUtleTogYXdhaXQgZ2V0QXBpS2V5KClcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgdXJsID0gaW5zdGFsbGF0aW9uQXJndW1lbnRUb1F1ZXJ5YGluc3RhbGxhdGlvbnMvJHtkYXRhfWA7XG4gICAgICAgIGNvbnNvbGUubG9nKHVybClcblxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwgcmVxdWVzdEluaXQpO1xuICAgICAgICBjb25zb2xlLmRlYnVnKHJlc3BvbnNlKVxuICAgICAgICBhY3RCeVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpO1xuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICB0aHJvdyBcIlJlc3BvbnNlIGZhaWxlZC5cIjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICBjb25zb2xlLmRlYnVnKGpzb24pXG4gICAgICAgIHJldHVybiBqc29uO1xuICAgIH1cbiAgICBzdGF0aWMgYXN5bmMgbWVhc3VyZW1lbnRzKGRhdGE6IEluc3RhbGxhdGlvbkFyZ3VtZW50KTogUHJvbWlzZTxBaXJseU1lYXN1cmVtZW50c0luZm8+IHtcbiAgICAgICAgbGV0IHJlcXVlc3RJbml0OiBSZXF1ZXN0SW5pdCA9IHt9O1xuICAgICAgICByZXF1ZXN0SW5pdC5oZWFkZXJzID0ge1xuICAgICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICBhcGlLZXk6IGF3YWl0IGdldEFwaUtleSgpXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHVybCA9IG1lYXN1cmVtZW50QXJndW1lbnRUb1F1ZXJ5YG1lYXN1cmVtZW50cy8ke2RhdGF9YDtcblxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwgcmVxdWVzdEluaXQpO1xuICAgICAgICBjb25zb2xlLmRlYnVnKHJlc3BvbnNlKVxuICAgICAgICBhY3RCeVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpO1xuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICB0aHJvdyBcIlJlc3BvbnNlIGZhaWxlZC5cIjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICBjb25zb2xlLmRlYnVnKGpzb24pO1xuICAgICAgICByZXR1cm4ganNvbjtcbiAgICB9XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n")},33:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _autoupdate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\nconst CACHE_NAME = 'airly-collector-cache-v1';\r\nconst urlsToCache = [\r\n    '/',\r\n    '/dist/build.js'\r\n];\r\nself.addEventListener('install', (event) => __awaiter(undefined, void 0, void 0, function* () {\r\n    console.debug(event);\r\n    event.waitUntil(caches.open(CACHE_NAME)\r\n        .then(cache => {\r\n        console.log('Opened cache');\r\n        return cache.addAll(urlsToCache);\r\n    }));\r\n}));\r\nself.addEventListener('fetch', (event) => {\r\n    event.respondWith(caches.match(event.request)\r\n        .then(response => {\r\n        if (response)\r\n            return response;\r\n        return fetch(event.request);\r\n    }));\r\n});\r\nself.addEventListener('activate', (event) => __awaiter(undefined, void 0, void 0, function* () {\r\n    console.debug('activate', event);\r\n    // updateAll();\r\n}));\r\nself.addEventListener('sync', (event) => {\r\n    console.debug('sync', event);\r\n    if (event.tag == 'autoupdateAllSync') {\r\n        event.waitUntil(updateAll());\r\n    }\r\n});\r\nself.addEventListener('message', function (event) {\r\n    if (event.data.type) {\r\n        event.waitUntil(processMessage(event.data));\r\n    }\r\n});\r\nself.addEventListener('online', (event) => {\r\n    // event.waitUntil(updateAll())\r\n});\r\nself.addEventListener('push', function (event) {\r\n    console.log('[Service Worker] Push Received.');\r\n    console.log(`[Service Worker] Push had this data: \"${event.data.text()}\"`);\r\n    const title = 'Push Codelab';\r\n    const options = {\r\n        body: `${event.data.text()}`,\r\n        icon: 'images/icons/icon-128x128.png'\r\n        // badge: 'images/badge.png'\r\n    };\r\n    event.waitUntil(self.registration.showNotification(title, options));\r\n});\r\nfunction processMessage(eventData) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const { type } = eventData;\r\n        switch (type) {\r\n            case 'cast':\r\n                return processCast(eventData);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n}\r\nfunction processCast(eventData) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const { action } = eventData;\r\n        switch (action) {\r\n            case 'autoupdateAll':\r\n                yield Object(_autoupdate__WEBPACK_IMPORTED_MODULE_0__[/* updateInstallationsAll */ \"c\"])();\r\n                send_message_to_all_clients({\r\n                    action,\r\n                    data: true\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n}\r\nlet updateAllTimeout = null;\r\nfunction updateAll() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        clearTimeout(updateAllTimeout);\r\n        yield Object(_autoupdate__WEBPACK_IMPORTED_MODULE_0__[/* autoupdateAll */ \"b\"])();\r\n        // scheduleUpdateAll();\r\n        return;\r\n    });\r\n}\r\nfunction scheduleUpdateAll() {\r\n    clearTimeout(updateAllTimeout);\r\n    updateAllTimeout = setTimeout(updateAll, 60000 * 60);\r\n}\r\nfunction send_message_to_client(client, msg) {\r\n    return new Promise(function (resolve, reject) {\r\n        var msg_chan = new MessageChannel();\r\n        msg_chan.port1.onmessage = function (event) {\r\n            if (event.data.error) {\r\n                reject(event.data.error);\r\n            }\r\n            else {\r\n                resolve(event.data);\r\n            }\r\n        };\r\n        client.postMessage(msg, [msg_chan.port2]);\r\n    });\r\n}\r\nfunction send_message_to_all_clients(msg) {\r\n    self.clients.matchAll().then(clients => {\r\n        clients.forEach(client => {\r\n            send_message_to_client(client, msg).then(m => console.log(\"SW Received Message: \" + m));\r\n        });\r\n    });\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///33\n")},4:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return updateMeasurements; });\n/* harmony import */ var _AirlyPull__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);\n/* harmony import */ var _Store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/* harmony import */ var _IndexedDB__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\nfunction updateMeasurements(data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            const installationInfo = yield _Store__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].Airly.installation(data);\r\n            const id = installationInfo.id;\r\n            const measurements = yield _AirlyPull__WEBPACK_IMPORTED_MODULE_0__[/* AirlyPull */ "a"].measurements(data);\r\n            const currentTime = new Date().toISOString();\r\n            return yield Promise.all([\r\n                storeHistory(id, measurements.history),\r\n                storeForecast(id, measurements.forecast, currentTime),\r\n                storeUpdateTime(id, currentTime),\r\n            ]);\r\n        }\r\n        catch (ex) {\r\n            return false;\r\n        }\r\n    });\r\n}\r\nfunction storeHistory(installationId, data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const records = data.map(measurement => ({\r\n            installationId,\r\n            measurement\r\n        }));\r\n        return Object(_IndexedDB__WEBPACK_IMPORTED_MODULE_2__[/* db */ "a"])(\'History\').measurement.putAll(records);\r\n    });\r\n}\r\nfunction storeForecast(installationId, data, currentTime = new Date().toISOString()) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const records = data.map(measurement => ({\r\n            installationId,\r\n            predictionDateTime: currentTime,\r\n            measurement\r\n        }));\r\n        return Object(_IndexedDB__WEBPACK_IMPORTED_MODULE_2__[/* db */ "a"])(\'History\').forecast.putAll(records);\r\n    });\r\n}\r\nfunction storeUpdateTime(installationId, updateDateTime = new Date().toISOString()) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const record = {\r\n            installationId,\r\n            updateDateTime\r\n        };\r\n        return Object(_IndexedDB__WEBPACK_IMPORTED_MODULE_2__[/* db */ "a"])(\'History\').updates.put(record);\r\n    });\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYWlybHkvQWlybHlNZWFzdXJlbWVudHNHYXRoZXJpbmcudHM/ODQ5ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBb0Y7QUFDdkQ7QUFDTztBQUU3QixTQUFlLGtCQUFrQixDQUFDLElBQTBCOztRQUMvRCxJQUFJO1lBQ0EsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLHNEQUFLLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM5RCxNQUFNLEVBQUUsR0FBRyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUM7WUFDL0IsTUFBTSxZQUFZLEdBQUcsTUFBTSw0REFBUyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN4RCxNQUFNLFdBQVcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQzdDLE9BQU8sTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDO2dCQUNyQixZQUFZLENBQUMsRUFBRSxFQUFFLFlBQVksQ0FBQyxPQUFPLENBQUM7Z0JBQ3RDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUM7Z0JBQ3JELGVBQWUsQ0FBQyxFQUFFLEVBQUUsV0FBVyxDQUFDO2FBQ25DLENBQUMsQ0FBQztTQUNOO1FBQUMsT0FBTyxFQUFFLEVBQUU7WUFDVCxPQUFPLEtBQUssQ0FBQztTQUNoQjtJQUNMLENBQUM7Q0FBQTtBQUNELFNBQWUsWUFBWSxDQUFDLGNBQXNCLEVBQUUsSUFBNEI7O1FBQzVFLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3JDLGNBQWM7WUFDZCxXQUFXO1NBQ2QsQ0FBQyxDQUFDO1FBQ0gsT0FBTyw2REFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckQsQ0FBQztDQUFBO0FBQ0QsU0FBZSxhQUFhLENBQUMsY0FBc0IsRUFBRSxJQUE0QixFQUFFLFdBQVcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRTs7UUFDckgsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDckMsY0FBYztZQUNkLGtCQUFrQixFQUFFLFdBQVc7WUFDL0IsV0FBVztTQUNkLENBQUMsQ0FBQyxDQUFDO1FBQ0osT0FBTyw2REFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbEQsQ0FBQztDQUFBO0FBQ0QsU0FBZSxlQUFlLENBQUMsY0FBc0IsRUFBRSxjQUFjLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUU7O1FBQzVGLE1BQU0sTUFBTSxHQUFHO1lBQ1gsY0FBYztZQUNkLGNBQWM7U0FDakI7UUFDRCxPQUFPLDZEQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM3QyxDQUFDO0NBQUEiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFpcmx5UHVsbCwgSW5zdGFsbGF0aW9uQXJndW1lbnQsIEFpcmx5TWVhc3VyZW1lbnRJbmZvIH0gZnJvbSAnLi9BaXJseVB1bGwnO1xuaW1wb3J0IFN0b3JlIGZyb20gJy4uL1N0b3JlJztcbmltcG9ydCB7IGRiIH0gZnJvbSBcIi4vLi4vSW5kZXhlZERCXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVNZWFzdXJlbWVudHMoZGF0YTogSW5zdGFsbGF0aW9uQXJndW1lbnQpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBpbnN0YWxsYXRpb25JbmZvID0gYXdhaXQgU3RvcmUuQWlybHkuaW5zdGFsbGF0aW9uKGRhdGEpO1xuICAgICAgICBjb25zdCBpZCA9IGluc3RhbGxhdGlvbkluZm8uaWQ7XG4gICAgICAgIGNvbnN0IG1lYXN1cmVtZW50cyA9IGF3YWl0IEFpcmx5UHVsbC5tZWFzdXJlbWVudHMoZGF0YSk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgICAgICByZXR1cm4gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgc3RvcmVIaXN0b3J5KGlkLCBtZWFzdXJlbWVudHMuaGlzdG9yeSksXG4gICAgICAgICAgICBzdG9yZUZvcmVjYXN0KGlkLCBtZWFzdXJlbWVudHMuZm9yZWNhc3QsIGN1cnJlbnRUaW1lKSxcbiAgICAgICAgICAgIHN0b3JlVXBkYXRlVGltZShpZCwgY3VycmVudFRpbWUpLFxuICAgICAgICBdKTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuYXN5bmMgZnVuY3Rpb24gc3RvcmVIaXN0b3J5KGluc3RhbGxhdGlvbklkOiBudW1iZXIsIGRhdGE6IEFpcmx5TWVhc3VyZW1lbnRJbmZvW10pIHtcbiAgICBjb25zdCByZWNvcmRzID0gZGF0YS5tYXAobWVhc3VyZW1lbnQgPT4gKHtcbiAgICAgICAgaW5zdGFsbGF0aW9uSWQsXG4gICAgICAgIG1lYXN1cmVtZW50XG4gICAgfSkpXG4gICAgcmV0dXJuIGRiKCdIaXN0b3J5JykubWVhc3VyZW1lbnQucHV0QWxsKHJlY29yZHMpO1xufVxuYXN5bmMgZnVuY3Rpb24gc3RvcmVGb3JlY2FzdChpbnN0YWxsYXRpb25JZDogbnVtYmVyLCBkYXRhOiBBaXJseU1lYXN1cmVtZW50SW5mb1tdLCBjdXJyZW50VGltZSA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSkge1xuICAgIGNvbnN0IHJlY29yZHMgPSBkYXRhLm1hcChtZWFzdXJlbWVudCA9PiAoe1xuICAgICAgICBpbnN0YWxsYXRpb25JZCxcbiAgICAgICAgcHJlZGljdGlvbkRhdGVUaW1lOiBjdXJyZW50VGltZSxcbiAgICAgICAgbWVhc3VyZW1lbnRcbiAgICB9KSk7XG4gICAgcmV0dXJuIGRiKCdIaXN0b3J5JykuZm9yZWNhc3QucHV0QWxsKHJlY29yZHMpO1xufVxuYXN5bmMgZnVuY3Rpb24gc3RvcmVVcGRhdGVUaW1lKGluc3RhbGxhdGlvbklkOiBudW1iZXIsIHVwZGF0ZURhdGVUaW1lID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpKSB7XG4gICAgY29uc3QgcmVjb3JkID0ge1xuICAgICAgICBpbnN0YWxsYXRpb25JZCxcbiAgICAgICAgdXBkYXRlRGF0ZVRpbWVcbiAgICB9XG4gICAgcmV0dXJuIGRiKCdIaXN0b3J5JykudXBkYXRlcy5wdXQocmVjb3JkKTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n')},7:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export autoupdateAllEnabled */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return autoupdateAll; });\n/* unused harmony export updateInstallations */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return updateInstallationsAll; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return App; });\n/* harmony import */ var _airly_AirlyMeasurementsGathering__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);\n/* harmony import */ var _Store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\nfunction autoupdateAllEnabled() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return yield _Store__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].Settings.setting(\'autoupdateAll\');\r\n    });\r\n}\r\nfunction autoupdateAll() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        if (yield autoupdateAllEnabled()) {\r\n            return yield updateInstallationsAll();\r\n        }\r\n        return false;\r\n    });\r\n}\r\nfunction updateInstallations(installations) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return yield Promise.all(installations.map(({ id }) => {\r\n            return Object(_airly_AirlyMeasurementsGathering__WEBPACK_IMPORTED_MODULE_0__[/* updateMeasurements */ "a"])({ id });\r\n        }));\r\n    });\r\n}\r\nfunction updateInstallationsAll() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const installations = (yield _Store__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].Settings.setting(\'installations\')) || [];\r\n        return yield updateInstallations(installations);\r\n    });\r\n}\r\nconst App = {\r\n    castAutoupdateAll() {\r\n        const ctrl = navigator.serviceWorker.controller;\r\n        if (ctrl) {\r\n            ctrl.postMessage({\r\n                type: \'cast\',\r\n                action: \'autoupdateAll\'\r\n            });\r\n        }\r\n    },\r\n    subscribeFor(action, callback) {\r\n        navigator.serviceWorker.addEventListener(\'message\', event => {\r\n            if (event.data && event.data.action && event.data.action === action) {\r\n                callback(event.data);\r\n            }\r\n        });\r\n    }\r\n};\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXV0b3VwZGF0ZS50cz9hZjQ0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUF3RTtBQUM1QztBQUVyQixTQUFlLG9CQUFvQjs7UUFDdEMsT0FBTyxNQUFNLHNEQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUN6RCxDQUFDO0NBQUE7QUFFTSxTQUFlLGFBQWE7O1FBQy9CLElBQUksTUFBTSxvQkFBb0IsRUFBRSxFQUFFO1lBQzlCLE9BQU8sTUFBTSxzQkFBc0IsRUFBRSxDQUFDO1NBQ3pDO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztDQUFBO0FBRU0sU0FBZSxtQkFBbUIsQ0FBQyxhQUErQjs7UUFDckUsT0FBTyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtZQUNsRCxPQUFPLG9HQUFrQixDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN0QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FBQTtBQUVNLFNBQWUsc0JBQXNCOztRQUN4QyxNQUFNLGFBQWEsR0FBRyxPQUFNLHNEQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsS0FBSSxFQUFFLENBQUM7UUFDMUUsT0FBTyxNQUFNLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3BELENBQUM7Q0FBQTtBQUNNLE1BQU0sR0FBRyxHQUFHO0lBQ2YsaUJBQWlCO1FBQ2IsTUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUM7UUFDaEQsSUFBSSxJQUFJLEVBQUU7WUFDTixJQUFJLENBQUMsV0FBVyxDQUFDO2dCQUNiLElBQUksRUFBRSxNQUFNO2dCQUNaLE1BQU0sRUFBRSxlQUFlO2FBQzFCLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQztJQUNELFlBQVksQ0FBQyxNQUFjLEVBQUUsUUFBa0I7UUFDM0MsU0FBUyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLEVBQUU7WUFDeEQsSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLE1BQU0sRUFBRTtnQkFDakUsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN4QjtRQUNMLENBQUMsQ0FBQztJQUNOLENBQUM7Q0FDSiIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXBkYXRlTWVhc3VyZW1lbnRzIH0gZnJvbSAnLi9haXJseS9BaXJseU1lYXN1cmVtZW50c0dhdGhlcmluZyc7XG5pbXBvcnQgU3RvcmUgZnJvbSAnLi9TdG9yZSc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhdXRvdXBkYXRlQWxsRW5hYmxlZCgpIHtcbiAgICByZXR1cm4gYXdhaXQgU3RvcmUuU2V0dGluZ3Muc2V0dGluZygnYXV0b3VwZGF0ZUFsbCcpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXV0b3VwZGF0ZUFsbCgpIHtcbiAgICBpZiAoYXdhaXQgYXV0b3VwZGF0ZUFsbEVuYWJsZWQoKSkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdXBkYXRlSW5zdGFsbGF0aW9uc0FsbCgpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVJbnN0YWxsYXRpb25zKGluc3RhbGxhdGlvbnM6IHsgaWQ6IG51bWJlciB9W10pIHtcbiAgICByZXR1cm4gYXdhaXQgUHJvbWlzZS5hbGwoaW5zdGFsbGF0aW9ucy5tYXAoKHsgaWQgfSkgPT4ge1xuICAgICAgICByZXR1cm4gdXBkYXRlTWVhc3VyZW1lbnRzKHsgaWQgfSk7XG4gICAgfSkpXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVJbnN0YWxsYXRpb25zQWxsKCkge1xuICAgIGNvbnN0IGluc3RhbGxhdGlvbnMgPSBhd2FpdCBTdG9yZS5TZXR0aW5ncy5zZXR0aW5nKCdpbnN0YWxsYXRpb25zJykgfHwgW107XG4gICAgcmV0dXJuIGF3YWl0IHVwZGF0ZUluc3RhbGxhdGlvbnMoaW5zdGFsbGF0aW9ucyk7XG59XG5leHBvcnQgY29uc3QgQXBwID0ge1xuICAgIGNhc3RBdXRvdXBkYXRlQWxsKCkge1xuICAgICAgICBjb25zdCBjdHJsID0gbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuY29udHJvbGxlcjtcbiAgICAgICAgaWYgKGN0cmwpIHtcbiAgICAgICAgICAgIGN0cmwucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdjYXN0JyxcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdhdXRvdXBkYXRlQWxsJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHN1YnNjcmliZUZvcihhY3Rpb246IHN0cmluZywgY2FsbGJhY2s6IEZ1bmN0aW9uKSB7XG4gICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBldmVudCA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuZGF0YSAmJiBldmVudC5kYXRhLmFjdGlvbiAmJiBldmVudC5kYXRhLmFjdGlvbiA9PT0gYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXZlbnQuZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7\n')}});